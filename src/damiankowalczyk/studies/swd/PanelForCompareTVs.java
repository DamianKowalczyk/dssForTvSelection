/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package damiankowalczyk.studies.swd;

import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * 
 * @author Damian
 */
public class PanelForCompareTVs extends javax.swing.JPanel {

	private ProgramFrame programFrame;
	private StartPanel startPanel;
		
	TVset[][] pairsOfTVtoCompare;
	NewPanelToCompareTwoTv[] panelsOfComparedTVs;	

	private PressOkListener okListener = new PressOkListener();
	
	private String[] allFeaturesList;
	ArrayList<TVset> allFilteredTVs;

	public PressOkListener getOkListener() {
		return okListener;
	}
	
	private void createMatrixesOfComparationForAllFeatures(){
		TVAllFeautures allFeatures = new TVAllFeautures();
		allFeaturesList = allFeatures.getListOfAllFeatures();
		int matrixNumber = allFeaturesList.length;
		
		float[][][] matrixesOfComparationForAllFeatures = new float[matrixNumber][][];		
		for (int i = 0; i < matrixNumber; i++) {
			matrixesOfComparationForAllFeatures[i] = getMatrixForFeature(i);
		} 
		
		programFrame.setMatrixesForEachFeature(matrixesOfComparationForAllFeatures);
	}
	

	private float[][] getMatrixForFeature(int feautureNumber) {
		int numberOfTVs = calculateNumberOfDifferentTVs();		
		int currentSliderValue;
		float[] parsetValuesFromSlidersInOrder = new float[pairsOfTVtoCompare.length];
		
		int currentIndex = 0;
		for (NewPanelToCompareTwoTv panToComp : panelsOfComparedTVs) {
			currentSliderValue = panToComp.getValueFromSliderAtIndex(feautureNumber);
			parsetValuesFromSlidersInOrder[currentIndex] = ValueFromScrollParser.parseValue(currentSliderValue);
			currentIndex++;
		}
		
		float[][] matrixOfFeature = new float[numberOfTVs][numberOfTVs];
		currentIndex = 0;
		for (int i = 0; i < numberOfTVs-1; i++) {
			for (int j = i+1; j < numberOfTVs; j++) {				
				matrixOfFeature[i][j] = parsetValuesFromSlidersInOrder[currentIndex];				
				currentIndex++;
			} 
		}		
		
		return matrixOfFeature;
	}
	
	private int calculateNumberOfDifferentTVs(){
		int result = (int) (1+ Math.sqrt((1+8*pairsOfTVtoCompare.length)));
		return result/=2;		
	}
	                                            

	/**
	 * Creates new form PanelForCompareTVs
	 */
	public PanelForCompareTVs() {
		initComponents();
		setVisible(false);		
	}

	public PanelForCompareTVs(ProgramFrame programFrame) {
		this();
		this.programFrame = programFrame;		
	}
	
	/*private void setListenerToFirstOkButtonInStartPanel(){
		startPanel.getJButton1().addActionListener();
	}*/

	private void createPairsOfTVsToCompare() {		
		List<String> choosenOption = startPanel.checkJBoxes();		
		
		allFilteredTVs = new TVsetsForCompare().getFilteredTVs(choosenOption);
		int pairsOfTVsToCompareNumber = (allFilteredTVs.size()*(allFilteredTVs.size()-1))/2;
		
		pairsOfTVtoCompare = new TVset[pairsOfTVsToCompareNumber][2];
		
		int index = 0;
		for (int i = 0; i < allFilteredTVs.size()-1; i++) {
			for (int j = i+1; j < allFilteredTVs.size(); j++) {
				pairsOfTVtoCompare[index][0]= allFilteredTVs.get(i);
				pairsOfTVtoCompare[index][1]= allFilteredTVs.get(j);
				index++;
			}
		}
	}
	
	private void addToScrollPanel() {
		jPanelForCompareTwoTVList.setLayout(new GridLayout(pairsOfTVtoCompare.length, 1));
		
		panelsOfComparedTVs = new NewPanelToCompareTwoTv[pairsOfTVtoCompare.length];
		NewPanelToCompareTwoTv tmpPanel;
		for (int i = 0; i < pairsOfTVtoCompare.length; i++) {
			tmpPanel = new NewPanelToCompareTwoTv(pairsOfTVtoCompare[i][0], pairsOfTVtoCompare[i][1]);
			panelsOfComparedTVs[i]= tmpPanel;
			jPanelForCompareTwoTVList.add(tmpPanel);
		}
	}

	public void setStartPanel(StartPanel startPanel) {
		this.startPanel = startPanel;
	}

	private void backStartViewToStartFrame() {
		setVisible(false);
		programFrame.getStartPanel().setVisible(true);
		programFrame.add(programFrame.getStartPanel());
	}

	private String[] getDecisionOrders() {
		/*String[] resultVector = { "sony", "philips", "sontax", "sharp", "LG",
				"other" };*/
		int[] indexesOrder = programFrame.ahpEngine.calculateOrderWhenMatrixCoherent();
		String[] resultVector = new String[allFilteredTVs.size()];
		
		int currentTV_Index;
		String currentTVname;
		for (int i = 0; i < indexesOrder.length; i++) {
			currentTV_Index = indexesOrder[i];
			currentTVname = allFilteredTVs.get(currentTV_Index).feautures.get(0);	// name is on the 0 position of features
			resultVector[i] = currentTVname;
		}
		
		return resultVector;
	}
	
	private void printPairs() {
		for (int i = 0; i < pairsOfTVtoCompare.length; i++) {
			System.out.println(pairsOfTVtoCompare[i][0]+"  and  "+pairsOfTVtoCompare[i][1]);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelForCompareTwoTVList = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanelForCompareTwoTVListLayout = new javax.swing.GroupLayout(jPanelForCompareTwoTVList);
        jPanelForCompareTwoTVList.setLayout(jPanelForCompareTwoTVListLayout);
        jPanelForCompareTwoTVListLayout.setHorizontalGroup(
            jPanelForCompareTwoTVListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 378, Short.MAX_VALUE)
        );
        jPanelForCompareTwoTVListLayout.setVerticalGroup(
            jPanelForCompareTwoTVListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanelForCompareTwoTVList);

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Finish");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 266, Short.MAX_VALUE)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

	private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton2ActionPerformed
		createMatrixesOfComparationForAllFeatures();
		
		boolean[] consistencyResultForEachFeature = programFrame.ahpEngine.checkConsistencyOfAllFeatureMatrixes();
		String featureToCorrect = "";
		int index = 0;
		for (boolean currentFeatureCoherent : consistencyResultForEachFeature) {
			if (!currentFeatureCoherent) {
				featureToCorrect+= allFeaturesList[index] + "; ";
			}
			index++;
		}
		
		if (featureToCorrect.equals("")) { // there is nothing to correct
			JFrame frame = new JFrame("Suggested, best choices in order:");
			frame.setSize(400, 200);
			JOptionPane.showMessageDialog(frame, getDecisionOrders());
		} else {
			JFrame frame = new JFrame("Warning");
			frame.setSize(400, 200);
			JOptionPane.showMessageDialog(frame, "This settings could give incorrect results\nPlease change your settings:\n"+featureToCorrect);
		}
	}

	private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
		backStartViewToStartFrame();
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanelForCompareTwoTVList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
    class PressOkListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
                createPairsOfTVsToCompare();
                addToScrollPanel();
                printPairs();
        }
    	
    }
    
    /*public void pressedOk() {
    	createPairsOfTVsToCompare();
        addToScrollPanel();
        printPairs();
	}*/
}
